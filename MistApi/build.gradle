apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

def getGitVersion = { ->
    def stdout = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'describe', '--abbrev=4', '--always', '--tags'
        standardOutput = stdout
    }


    return stdout.toString().trim()
}

def getGitClean = { ->

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout

    }
    if ("${stdout.size()}" > 0) {
        return "-d"
    } else {
        return "-c"
    }
}

def libraryGroupId = 'fi.ct.mist'
def libraryArtifactId = archivesBaseName
def libraryVersion = '0.8.9'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    def git_version = getGitVersion

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28

        buildConfigField "String", "GitVersion", "\"${git_version}\""
        buildConfigField "String", "GitClean", "\"${getGitClean()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            libraryVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${libraryArtifactId}-${libraryVersion}.aar"
                }
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage','InvalidPackage'
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'org.mongodb:bson:3.6.0'
    implementation 'org.apache.commons:commons-compress:1.12'
    implementation 'com.squareup.okio:okio:1.15.0'
    implementation 'fi.ct.wish:WishCore:0.6.2'
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/${artifactId}-${version}.aar")

            //generate pom nodes for dependencies
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }
}

allprojects { currProject ->
    task printDependencies {
        dependsOn 'dependencies'
    }
}

/*
artifactory {
    contextUrl = 'http://foremost.cto.fi:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-local'

            username = artifactory_username
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}
*/